{
    "name": "coc-sonarlint",
    "version": "0.0.10",
    "description": "sonarlint for coc.nvim",
    "author": "asmodeus812",
    "license": "MIT",
    "main": "lib/index.js",
    "keywords": [
        "coc.nvim"
    ],

    "engines": {
        "coc": "^0.0.82"
    },
    "scripts": {
        "watch": "node esbuild.mjs --watch",
        "build": "node esbuild.mjs",
        "prepare": "node esbuild.mjs"
    },
    "dependencies": {
        "lodash": "^4.14.194",
        "node-html-markdown": "1.3.0",
        "node-html-parser": "6.1.13"
    },
    "devDependencies": {
        "@types/fs-extra": "^8.0.0",
        "@types/vscode": "^1.73.1",
        "@types/glob": "5.0.30",
        "@types/semver": "^7.3.8",
        "@types/winreg": "^1.2.30",
        "@types/node": "^14.14",
        "@types/marked": "^4.0.1",
        "@types/uuid": "^8.3.0",
        "typescript": "^4.9.4",
        "coc.nvim": "^0.0.83-next.17",
        "vscode-languageserver-protocol": "^3.17.2",
        "esbuild": "^0.15.13",
        "compare-versions": "4.1.3",
        "expand-home-dir": "^0.0.3",
        "find-java-home": "1.2.2",
        "fs-extra": "^8.1.0",
        "path-exists": "4.0.0",
        "jdk-utils": "^0.5.1"
    },
    "activationEvents": [
        "onLanguage:c",
        "onLanguage:cpp",
        "onLanguage:cuda",
        "onLanguage:objc",
        "onLanguage:objcpp",
        "onLanguage:opencl",
        "onLanguage:objective-c",
        "onLanguage:objective-cpp",
        "onLanguage:php",
        "onLanguage:java",
        "onLanguage:cs",
        "onLanguage:vb",
        "onLanguage:markdown",
        "onLanguage:css",
        "onLanguage:less",
        "onLanguage:scss",
        "onLanguage:go",
        "onLanguage:gomod",
        "onLanguage:python",
        "onLanguage:jupyter",
        "onLanguage:javascript",
        "onLanguage:javascriptreact",
        "onLanguage:javascript.jsx",
        "onLanguage:typescript",
        "onLanguage:typescript.tsx",
        "onLanguage:typescript.jsx",
        "onLanguage:typescriptreact",
        "onLanguage:jsx-tags",
        "onLanguage:jsonc",
        "workspaceContains:*/pom.xml",
        "workspaceContains:build.gradle",
        "workspaceContains:.sonar.properties"
    ],
    "contributes": {
        "rootPatterns": [
            {
                "filetype": "*",
                "patterns": [
                    ".git",
                    "package.json"
                ]
            }
        ],
        "configuration": {
            "type": "object",
            "title": "SonarLint",
            "properties": {
                "sonarlint.rules": {
                    "order": 1,
                    "type": "object",
                    "scope": "application",
                    "default": { },
                    "markdownDescription": "Customize applied rule set. This property contains a list of rules whose activation level or parameter values differ from the one provided by default. In [Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22), this configuration is overridden by the projects's Quality Profile, as configured on server side and can be **shared among contributors**. See [SonarLint Rules](command:SonarLint.AllRules.focus) view for the list of **locally** available rules.\n\nExample:\n\n    \"sonarlint.rules\": {\n        \"javascript:1481\": {\n            \"level\": \"off\",\n        \"javascript:S103\": {\n            \"level\": \"on\",\n            \"parameters\": {\n                \"maximumLineLength\": \"120\"\n            }\n        }\n    }\n",
                    "patternProperties": {
                        "^[^:]+:[^:]+$": {
                            "type": "object",
                            "markdownDescription": "Property names are rule keys in the form: `repo:key`",
                            "properties": {
                                "level": {
                                    "type": "string",
                                    "enum": [
                                        "off",
                                        "on"
                                    ],
                                    "markdownDescription": "When set to `off`, disable the rule. When set to `on`, enable the rule."
                                },
                                "parameters": {
                                    "type": "object",
                                    "markdownDescription": "Rule parameters. See rule description for accepted parameters. E.g `{ \"intParam\": \"123\" }`."
                                },
                                "additionalProperties": false
                            }
                        }
                    },
                    "additionalProperties": false
                },
                "sonarlint.connectedMode.servers": {
                    "deprecationMessage": "The setting is deprecated. Use `sonarlint.connectedMode.connections.sonarqube` or `sonarlint.connectedMode.connections.sonarcloud` instead.",
                    "type": "array",
                    "scope": "application",
                    "default": [ ],
                    "markdownDescription": "Configure one or more connection(s) to SonarQube/SonarCloud. For security reasons, the token should not be stored in SCM with workspace settings. The `serverId` can be any identifier and will be referenced in `#sonarlint.connectedMode.project#`.\n\nExample for SonarCloud:\n\n    \"sonarlint.connectedMode.servers\": [\n      {\n        \"serverId\": \"my_orga_in_sonarcloud.io\",\n        \"serverUrl\": \"https://sonarcloud.io\",\n        \"organizationKey\": \"my_organization\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]\n\nExample for SonarQube:\n\n    \"sonarlint.connectedMode.servers\": [\n      {\n        \"serverId\": \"my_sonarqube\",\n        \"serverUrl\": \"https://sonar.mycompany.com\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]",
                    "items": {
                        "properties": {
                            "serverId": {
                                "type": "string",
                                "description": "A unique identifier for this server connection. Will be referenced from `#sonarlint.connectedMode.project#`"
                            },
                            "serverUrl": {
                                "type": "string",
                                "description": "URL of the server. Use https://sonarcloud.io for SonarCloud."
                            },
                            "token": {
                                "type": "string",
                                "description": "Token generated from My Account>Security in SonarQube/SonarCloud"
                            },
                            "organizationKey": {
                                "type": "string",
                                "description": "Only used for SonarCloud"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "sonarlint.connectedMode.connections.sonarqube": {
                    "order": 2,
                    "type": "array",
                    "scope": "application",
                    "default": [ ],
                    "markdownDescription": "Connect SonarLint to SonarQube to apply the same Clean Code standards as your team. Analyze more languages, detect more issues **on the whole project**, receive notifications about the quality gate status, and more. Quality Profiles and file exclusion settings defined on the server are shared between all connected users. Please find the documentation [here](https://docs.sonarsource.com/sonarlint/vs-code/team-features/connected-mode/)",
                    "items": {
                        "type": "object",
                        "properties": {
                            "connectionId": {
                                "type": "string",
                                "description": "A unique identifier for this connection to be used as a reference in `#sonarlint.connectedMode.project#`. Only needed if you plan to use multiple connections to SonarQube/SonarCloud."
                            },
                            "serverUrl": {
                                "type": "string",
                                "description": "URL of the SonarQube server."
                            },
                            "token": {
                                "type": "string",
                                "description": "Token generated from 'My Account>Security' in SonarQube"
                            },
                            "disableNotifications": {
                                "type": "boolean",
                                "description": "SonarLint will show notifications for bound projects when there are new issues assigned to you, or when the quality gate status changed. Set to false to disable all notifications for projects bound to this connection."
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "serverUrl"
                        ],
                        "examples": [
                            {
                                "serverUrl": "https://<replace_with_your_sonarqube_server_url>"
                            },
                            {
                                "connectionId": "MyCompanySonarQube",
                                "serverUrl": "https://<replace_with_your_sonarqube_server_url>",
                                "disableNotifications": false
                            }
                        ]
                    }
                },
                "sonarlint.connectedMode.connections.sonarcloud": {
                    "order": 3,
                    "type": "array",
                    "scope": "application",
                    "default": [ ],
                    "markdownDescription": "Connect SonarLint to SonarCloud to apply the same Clean Code standards as your team. Analyze more languages, detect more issues **on the whole project**, receive notifications about the quality gate status, and more. Quality Profiles and file exclusion settings defined on the server are shared between all connected users. Please find the documentation [here](https://docs.sonarsource.com/sonarlint/vs-code/team-features/connected-mode/)",
                    "items": {
                        "type": "object",
                        "properties": {
                            "connectionId": {
                                "type": "string",
                                "description": "A unique identifier for this connection to be used as a reference in `#sonarlint.connectedMode.project#`. Only needed if you plan to use multiple connections to SonarQube/SonarCloud."
                            },
                            "organizationKey": {
                                "type": "string",
                                "description": "A SonarCloud organization key. If you want to bind different projects that are in different organizations, simply declare multiple connections."
                            },
                            "token": {
                                "type": "string",
                                "description": "Token generated from 'My Account>Security' in SonarCloud"
                            },
                            "disableNotifications": {
                                "type": "boolean",
                                "description": "SonarLint will show notifications for bound projects when there are new issues assigned to you, or when the quality gate status changed. Set to false to disable all notifications for projects bound to this connection."
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "organizationKey"
                        ],
                        "examples": [
                            {
                                "organizationKey": "<replace_with_your_sonarcloud_organization_key>"
                            },
                            {
                                "connectionId": "MyOrganization",
                                "organizationKey": "<replace_with_your_sonarcloud_organization_key>",
                                "disableNotifications": false
                            }
                        ]
                    }
                },
                "sonarlint.connectedMode.project": {
                    "order": 4,
                    "markdownDescription": "Bind the current workspace folder to a [SonarQube](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarQubeProductPage%22) or [SonarCloud](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarCloudProductPage%22) project. Requires connection details to be defined in the setting `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`.\n\nBinding a workspace folder to a server project allows SonarLint to match, as much as possible, the same rules and settings as found on the server, and hence share the analysis configuration with other contributors.\n\nExample:\n\n    \"sonarlint.connectedMode.project\": {\n      \"projectKey\": \"my_project\",\n      \"connectionId\":\"my_connection_id\"\n    }\n\n",
                    "examples": [
                        {
                            "projectKey": "<replace_with_server_project_key>"
                        },
                        {
                            "connectionId": "<replace_with_connection_id>",
                            "projectKey": "<replace_with_server_project_key>"
                        }
                    ],
                    "default": { },
                    "anyOf": [
                        {
                            "type": "object",
                            "properties": {
                                "serverId": {
                                    "type": "string",
                                    "description": "Identifier of the server connection declared in `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`"
                                },
                                "projectKey": {
                                    "type": "string",
                                    "description": "Key of the project in SonarQube/SonarCloud"
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "serverId",
                                "projectKey"
                            ],
                            "deprecationMessage": "Replace `serverId` attribute by `connectionId`."
                        },
                        {
                            "type": "object",
                            "properties": {
                                "connectionId": {
                                    "type": "string",
                                    "description": "Identifier of the server connection declared in `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`"
                                },
                                "projectKey": {
                                    "type": "string",
                                    "description": "Key of the project in SonarQube/SonarCloud (can be found on project homepage)"
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "projectKey"
                            ]
                        }
                    ],
                    "scope": "resource"
                },
                "sonarlint.pathToNodeExecutable": {
                    "order": 10,
                    "type": "string",
                    "markdownDescription": "Path to a Node.js executable (18.18 or more recent) used to analyze JavaScript and TypeScript code. \nOn Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\NodeJS\\\\20-lts\\\\bin\\\\node.exe`",
                    "scope": "machine"
                },
                "sonarlint.pathToCompileCommands": {
                    "order": 11,
                    "type": "string",
                    "markdownDescription": "Path to the active compilation database, e.g. `C:\\\\Repos\\\\MyProject\\\\compile_commands.json`",
                    "scope": "resource"
                },
                "sonarlint.testFilePattern": {
                    "order": 12,
                    "type": "string",
                    "default": "",
                    "markdownDescription": "Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) are considered as test files by analyzers. Most rules are *not* evaluated on test files.\n\nIn [Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22), this setting is configured **on the server-side** and shared among all contributors.\n\nExample: `**/test/**,**/*test*,**/*Test*`",
                    "scope": "resource"
                },
                "sonarlint.analysisExcludesStandalone": {
                    "order": 13,
                    "type": "string",
                    "default": "",
                    "markdownDescription": "Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) will not be processed by analyzers. In [Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22) with SonarQube or SonarCloud, this property will be ignored and server exclusion settings will be applied. No rules are evaluated on excluded files. Example: `**/lib/**,**/*generated*`",
                    "scope": "resource"
                },
                "sonarlint.notifyMissingCompileCommands": {
                    "order": 21,
                    "default": true,
                    "type": "boolean",
                    "markdownDescription": "Specifies if missing or invalid compile commands in c or cpp projects will prompt the user to generate or create one, by default the user will be asked for each new workspace he visits, and the user can opt out of it per workspace by selecting the option - Do not ask for compile commands again for this workspace",
                    "scope": "resource"
                },
                "sonarlint.ls.javaHome": {
                    "order": 20,
                    "type": "string",
                    "markdownDescription": "Path to a Java Runtime Environment (17 or more recent) used to launch the SonarLint Language Server.\n* On Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\Java\\\\jdk-17` \n* On macOS, this path should include the `/Contents/Home` directory, e.g `/Library/Java/JavaVirtualMachines/corretto-17.0.5/Contents/Home`",
                    "scope": "machine"
                },
                "sonarlint.ls.directory": {
                    "order": 21,
                    "type": "string",
                    "markdownDescription": "Specifies the directory for where to sonar lint and its binaries, the directory must contain two folders, a server/ and analyzers/, where the server binary is located in the server/ folder and all analyzer binaries are located in the analyzers/ folder",
                    "scope": "machine"
                },
                "sonarlint.ls.vmargs": {
                    "order": 21,
                    "type": "string",
                    "markdownDescription": "Extra JVM arguments used to launch the SonarLint Language Server. e.g. `-Xmx1024m`",
                    "scope": "machine"
                },
                "sonarlint.output.showVerboseLogs": {
                    "order": 90,
                    "type": "boolean",
                    "default": false,
                    "description": "Enable verbose log level in the SonarLint output.",
                    "scope": "window"
                },
                "sonarlint.output.showAnalyzerLogs": {
                    "order": 91,
                    "type": "boolean",
                    "default": false,
                    "description": "Show analyzer's logs in the SonarLint output.",
                    "scope": "window"
                },
                "sonarlint.analyzerProperties": {
                    "order": 92,
                    "type": "object",
                    "patternProperties": {
                        "^.*$": {
                            "type": "string",
                            "markdownDescription": "One entry value"
                        },
                        "additionalProperties": false
                    },
                    "markdownDescription": "Extra properties that could be passed to the code analyzers. Only for advanced use cases.",
                    "scope": "resource"
                },
                "sonarlint.trace.server": {
                    "order": 98,
                    "default": "off",
                    "description": "Traces the communication between VS Code and the SonarLint language server.",
                    "scope": "window",
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "off",
                                "messages",
                                "verbose"
                            ],
                            "default": "off"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "verbosity": {
                                    "type": "string",
                                    "enum": [
                                        "off",
                                        "messages",
                                        "verbose"
                                    ],
                                    "default": "off"
                                },
                                "format": {
                                    "type": "string",
                                    "enum": [
                                        "text",
                                        "json"
                                    ],
                                    "default": "text"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                },
                "sonarlint.disableTelemetry": {
                    "order": 99,
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Disable sending anonymous usage statistics to SonarSource. Click [here](https://github.com/SonarSource/sonarlint-vscode/blob/master/telemetry-sample.md) to see a sample of the data that are collected.",
                    "scope": "window"
                },
                "sonarlint.focusOnNewCode": {
                    "order": 100,
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Set SonarLint focus to new code. [Learn how](https://docs.sonarsource.com/sonarlint/vs-code/using-sonarlint/investigating-issues/#focusing-on-new-code) to deliver clean code with Clean as You Code.",
                    "scope": "window"
                }
            }
        },
        "commands": [
            {
                "command": "SonarLint.ShowSonarLintOutput",
                "title": "Show SonarLint Output",
                "category": "SonarLint"
            },
            {
                "command": "SonarLint.EnableVerboseLogs",
                "title": "Enable Verbose Logging",
                "category": "SonarLint"
            },
            {
                "command": "SonarLint.InstallManagedJre",
                "title": "Install the managed java runtime binaries",
                "category": "SonarLint"
            },
            {
                "command": "SonarLint.ConfigureCompilationDatabase",
                "title": "Configure the compilation database for C and C++ analysis",
                "category": "SonarLint"
            },
            {
                "command": "SonarLint.DeactivateRule",
                "title": "Deactivate",
                "enablement": "view == SonarLint.AllRules"
            },
            {
                "command": "SonarLint.ActivateRule",
                "title": "Activate",
                "enablement": "view == SonarLint.AllRules"
            },
            {
                "command": "SonarLint.ShowAllRules",
                "title": "All",
                "enablement": "view == SonarLint.AllRules"
            },
            {
                "command": "SonarLint.ShowActiveRules",
                "title": "Active",
                "enablement": "view == SonarLint.AllRules"
            },
            {
                "command": "SonarLint.ShowInactiveRules",
                "title": "Inactive",
                "enablement": "view == SonarLint.AllRules"
            },
            {
                "command": "SonarLint.FindRuleByKey",
                "title": "Find Rule By Key",
                "enablement": "view == SonarLint.AllRules"
            }
        ]
    }
}
